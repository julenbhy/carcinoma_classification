import sys
sys.path.append('../tools')
import os
import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
import cv2



NUM_CLASSES = 2
IMG_PATH = './tile_database/'+str(TILE_SIZE)+'_useful_images/'   # tile containing directory
MAX_SIZE = 512  # the maximum size for images, if grater --> downsample
BATCH_SIZE = 8  # size of the readed batches from generator, must fit on memory
VAL_SPLIT = 0.2  # fraction of the images used for validation

# Image generator
train_generator = ImageGenerator(train_image_directory,batch_size=batch_size, shuffle=True, max_dimension=max_dimension)

train_dataset = tf.data.Dataset.from_generator(train_generator,
     (tf.float32, tf.int32),
    (tf.TensorShape([None,None,None,3]), tf.TensorShape([None])))

test_dataset = tf.data.Dataset.from_generator(test_generator,
     (tf.float32, tf.int32),
    (tf.TensorShape([None,None,None,3]), tf.TensorShape([None])))


# CNN construction
inputs = Input(shape=(None,None,3))
net = MobileNetV2(include_top=False, alpha=0.35, weights='imagenet', input_tensor=inputs, classes=NUM_CLASSES = 2)
net = GlobalMaxPooling2D()(net.output)
outputs = Dense(n_classes,activation='softmax')(net)
model = Model(inputs=inputs,outputs=outputs)
model.compile(optimizer='Adam', loss='sparse_categorical_crossentropy',metrics=['sparse_categorical_accuracy'])


#train and evaluate model
model.fit(train_dataset,validation_data=test_dataset,epochs=10,verbose=1,workers=2,max_queue_size=20)

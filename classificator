import sys
sys.path.append('../tools')
import os
import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
import cv2



NUM_CLASSES = 2
TRAIN_PATH = './train_dataset/   # dataset containing directory
MAX_SIZE = 512  # the maximum size for images, if grater --> downsample
BATCH_SIZE = 8  # size of the readed batches from generator, must fit on memory
VAL_SPLIT = 0.2  # fraction of the images used for validation

# Image generator


train_generator = train_datagen.flow_from_directory(  
    train_data_dir,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='categorical')

validation_generator = test_datagen.flow_from_directory(  
    validation_data_dir,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='categorical')
    
    
train_datagen = ImageDataGenerator(rescale=1./255,
                                  shear_range=0.2,
                                  zoom_range=0.2,
                                  rotation_range = 5,
                                  horizontal_flip=True,
                                  validation_split=0.2) # set validation split

train_generator = train_datagen.flow_from_directory(
    TRAIN_PATH,
    batch_size=BATCH_SIZE,
    class_mode='binary',
    subset='training') # set as training data

validation_generator = train_datagen.flow_from_directory(
    TRAIN_PATH, # same directory as training data
    batch_size=BATCH_SIZE,
    class_mode='binary',
    subset='validation') # set as validation data


# CNN construction
inputs = Input(shape=(None,None,3))
net = MobileNetV2(include_top=False, alpha=0.35, weights='imagenet', input_tensor=inputs, classes=NUM_CLASSES = 2)
net = GlobalMaxPooling2D()(net.output)
outputs = Dense(n_classes,activation='softmax')(net)
model = Model(inputs=inputs,outputs=outputs)
model.compile(optimizer='Adam', loss='sparse_categorical_crossentropy',metrics=['sparse_categorical_accuracy'])


#train and evaluate model
model.fit(train_generator,
          validation_data=validation_generator,
          epochs=10,
          verbose=1,
          workers=2,
          max_queue_size=20)

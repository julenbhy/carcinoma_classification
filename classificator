import sys
sys.path.append('../tools')
import os
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import numpy as np
import matplotlib.pyplot as plt
import cv2



NUM_CLASSES = 2
TRAIN_PATH = './train_dataset'   # dataset containing directory
MAX_SIZE = 512  # the maximum size for images, if grater --> downsample
BATCH_SIZE = 32  # size of the readed batches from generator, must fit on memory
VAL_SPLIT = 0.2  # fraction of the images used for validation

# Image generator
   
PREPROCESS = None #funcion de preprocesado de imagenes
    
train_datagen = ImageDataGenerator(rescale=1./255,
                                    rotation_range = 5,
                                    shear_range=0.2,
                                    zoom_range=0.2,
                                    width_shift_range=0.0,
                                    height_shift_range=0.0,
                                    fill_mode='wrap',
                                    brightness_range=None,
                                    horizontal_flip=True,
                                    vertical_flip=True,
                                    validation_split=0.2,# set validation split
                                    preprocessing_function=PREPROCESS) 


train_generator = train_datagen.flow_from_directory(TRAIN_PATH,
                                                    subset='training',
                                                    batch_size=BATCH_SIZE,
                                                    class_mode='categprocal',
                                                    shuffle=True,) # set as training data

validation_generator = train_datagen.flow_from_directory(TRAIN_PATH, # same directory as training data
                                                         subset='validation',
                                                         batch_size=BATCH_SIZE,
                                                         class_mode='categorical',
                                                         shuffle=True,) # set as validation data



# CNN construction
inputs = Input(shape=(None,None,3))
net = MobileNetV2(include_top=False, alpha=0.35, weights='imagenet', input_tensor=inputs, classes=NUM_CLASSES = 2)
net = GlobalMaxPooling2D()(net.output)
outputs = Dense(n_classes,activation='softmax')(net)
model = Model(inputs=inputs,outputs=outputs)
model.compile(optimizer='Adam', loss='sparse_categorical_crossentropy',metrics=['sparse_categorical_accuracy'])


#train and evaluate model
model.fit(train_generator,
            validation_data=validation_generator,
            epochs=10,
            verbose=1,
            workers=2,
            max_queue_size=20)
